#!/usr/share/python

import hashlib
import time
import os
import sys
import crypt
import base64
from colorama import Fore

print(Fore.RED + "Loading vulnxhash..." + Fore.RESET)
time.sleep(3)
os.system("cls" if os.name == "nt" else "clear")


def banner():
    print(Fore.CYAN + """
*******************************************************************
*                                                                 *
*             Saas Company - Vulnxhash - hash decrypter           *
*                                                                 *
* Vulnxhash Ver. 1.1                                              *
* Coded by Gug_Saas                                               *
* Hashes Avaliable: MD5, SHA1, SHA256, SHA512, Base64, With Salt  *
*******************************************************************\n""" + Fore.RESET)


if len(sys.argv) == 2:
    banner()
    print(Fore.MAGENTA + """
Menu

1 - Decrpyt MD5
2 - Decrypt SHA1
3 - Decrypt SHA256
4 - Decrypt SHA512
5 - Decode Base64
6 - Decrypt with salt
7 - Encrypt mode

""" + Fore.RESET)

    option1 = input("Option: ")

    if(option1 == '1'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist.", 'red' + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.md5(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '2'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha1(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '3'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha256(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '4'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha512(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found.", Fore.RESET)
    elif(option1 == '5'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        result = base64.b64decode(full_hash)
        print(Fore.GREEN + f"[+] {result}", Fore.RESET)
    elif(option1 == '6'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        tmp = full_hash.split("$")
        salt = "$" + tmp[1] + "$" + tmp[2] + "$"
        print(Fore.RED + f"Salt: {salt}\n" + Fore.RESET)
        algorithm = salt

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = crypt.crypt(word, algorithm)
            if(tmp == full_hash):
                print(Fore.GREEN + f"[+] {word} - {tmp}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]" + " {0}".format(word) + " - " + "{0}".format(tmp))
        print(Fore.RED + "\n" + "[FAIL] No password was found.", Fore.RESET)
    elif(option1 == '7'):
        print(Fore.RED + "Algorithm: " + Fore.RESET, end="")
        algorithm = input()
        algorithm = algorithm.lower()

        if(algorithm == "md5"):
            print(Fore.RED + "Word: " + Fore.RESET, end="")
            word = input()
            word = bytes(word, 'utf-8')
            result = hashlib.md5(word).hexdigest()
            print(Fore.GREEN + f"Your hash: {result}" + Fore.RESET)
        elif(algorithm == "sha1"):
            print(Fore.RED + "Word: " + Fore.RESET, end="")
            word = input()
            word = bytes(word, 'utf-8')
            result = hashlib.sha1(word).hexdigest()
            print(Fore.GREEN + f"Your hash: {result}" + Fore.RESET)
        elif(algorithm == "sha256"):
            print(Fore.RED + "Word: " + Fore.RESET, end="")
            word = input()
            word = bytes(word, 'utf-8')
            result = hashlib.sha256(word).hexdigest()
            print(Fore.GREEN + f"Your hash: {result}" + Fore.RESET)
        elif(algorithm == "sha512"):
            print(Fore.RED + "Word: " + Fore.RESET, end="")
            word = input()
            word = bytes(word, 'utf-8')
            result = hashlib.sha512(word).hexdigest()
            print(Fore.GREEN + f"Your hash: {result}" + Fore.RESET)
        elif(algorithm == "base64"):
            print(Fore.RED + "Word: " + Fore.RESET, end="")
            word = input()
            word = bytes(word, 'utf-8')
            result = base64.b64encode(word)
            result = str(result)
            print(type(result))
            print(Fore.GREEN + "Your hash:", result.strip("b '") + Fore.RESET)
        else:
            print("Error")
            sys.exit()
    else:
        print("Error")
        sys.exit()
else:
    banner()
    print(Fore.BLUE + "Usage: python all_hash.py wordlist.txt" + Fore.RESET)
