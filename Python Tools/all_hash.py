#!/usr/bin/python3

import hashlib
import time
import re
import binascii
import os
import sys
import crypt
import base64
from passlib.hash import lmhash
from colorama import Fore

print(Fore.RED + "Loading vulnxhash..." + Fore.RESET)
time.sleep(3)
os.system("cls" if os.name == "nt" else "clear")


def banner():
    print(Fore.CYAN + """
***************************************************************************
*                                                                         *
*               Saas Company - Vulnxhash - Hash Decrypter                 *
*                                                                         *
* Vulnxhash Ver. 1.3                                                      *
* Coded by Gug_Saas                                                       *
* Hashes Avaliables: MD5, SHA1, SHA256, SHA384, SHA512, Crypts, LM, NTLM  *
* Encondes Avaliables: Base64                                             *
***************************************************************************\n""" + Fore.RESET)


def generate(hash):
    result = ''
    print(Fore.RED + "Word: " + Fore.RESET, end="")
    word = input()
    if hash == 1:
        word = bytes(word, 'utf-8')
        result = hashlib.md5(word).hexdigest()
    elif hash == 2:
        word = bytes(word, 'utf-8')
        result = hashlib.sha1(word).hexdigest()
    elif hash == 3:
        word = bytes(word, 'utf-8')
        result = hashlib.sha256(word).hexdigest()
    elif hash == 4:
        word = bytes(word, 'utf-8')
        result = hashlib.sha512(word).hexdigest()
    elif hash == 5:
        word = bytes(word, 'utf-8')
        result = base64.b64encode(word)
        result = str(result)
        print(Fore.GREEN + "\nYour hash:", result.strip("b '") + Fore.RESET)
        return
    elif hash == 6:
        word = bytes(word, 'utf-8')
        result = hashlib.sha384(word).hexdigest()
    elif hash == 7:
        word = bytes(word, 'utf-8')
        h = lmhash.hash(word)
        h = str(h)
        result = h.strip("b '")
        result = result.upper()
    elif hash == 8:
        word = str(word)
        hashh = hashlib.new('md4', word.encode('utf-16le')).digest()
        hashh = binascii.hexlify(hashh)
        hashh = str(hashh)
        hashh = hashh.upper()
        print(Fore.GREEN + "\nYour hash:", hashh.strip("B '"), Fore.RESET)
        return
    elif hash == 9:
        print(Fore.RED + "Full Salt: " + Fore.RESET, end="")
        salt = input()
        result = crypt.crypt(word, salt)
    else:
        return
    print(Fore.GREEN + f"\nYour hash: {result}" + Fore.RESET)


if len(sys.argv) == 2:
    banner()
    print(Fore.MAGENTA + """
*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*  Menu  */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/

1  - Decrpyt MD5
2  - Decrypt SHA1
3  - Decrypt SHA256
4  - Decrypt SHA384
5  - Decrypt SHA512
6  - Decrypt LM
7  - Decrypt NTLM
8  - Decrypt MD5Crypt, SHA1Crypt, SHA256Crypt, SHA512Crypt
9  - Decode Base64
10 - Encrypt mode (MD5, SHA1, SHA256, SHA384, SHA512, LM, NTLM, BASE64, CRYPT)

*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/**/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
""" + Fore.RESET)

    print(Fore.RED + "Option: " + Fore.RESET, end="")
    option1 = input()

    if(option1 == '1'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist.", 'red' + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.md5(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '2'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha1(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '3'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha256(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '4'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha384(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '5'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = hashlib.sha512(tmp).hexdigest()
            if(password == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found.", Fore.RESET)
    elif(option1 == '6'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        print(full_hash)

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='utf-8') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = bytes(word, 'utf-8')
            password = lmhash.hash(tmp)
            if(password.upper() == full_hash):
                print(Fore.GREEN + f"[+] {word} - {password}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]", f" {word}", "-", f"{password}")
        print(Fore.RED + "\n" + "[FAIL] No password was found." + Fore.RESET)
    elif(option1 == '7'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()
        full_hash2 = bytes(full_hash.lower(), 'utf-8')

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            hashh = hashlib.new('md4', word.encode('utf-16le')).digest()
            hashh = binascii.hexlify(hashh)

            if(re.search(full_hash2, hashh)):
                hashh = str(hashh)
                hashh = hashh.strip("b '")
                hashh = hashh.upper()
                print(Fore.GREEN + "[+] ", word, '-', hashh + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                hashh = str(hashh)
                print("[-]", f" {word}", "-", hashh.strip("b '"))
        print(Fore.RED + "\n" + "[FAIL] No password was found.", Fore.RESET)
    elif(option1 == '8'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        tmp = full_hash.split("$")
        salt = "$" + tmp[1] + "$" + tmp[2] + "$"
        print(Fore.RED + "Salt:" + Fore.RESET, f"{salt}\n")

        wordlist = sys.argv[1]
        try:
            with open(wordlist, "r", encoding='iso8859_15') as fl:
                words = fl.read().split("\n")
            print("Wordlist Size: " + str(len(words)))
        except Exception as error:
            print(Fore.RED + "Failed to load wordlist." + Fore.RESET)
            print(error)
            sys.exit()

        print(Fore.CYAN + "\nStarting...\n" + Fore.RESET)

        for word in words:
            tmp = crypt.crypt(word, salt)
            if(tmp == full_hash):
                print(Fore.GREEN + f"[+] {word} - {tmp}" + Fore.RESET)
                print(Fore.GREEN + "[OK] Your key was found." + Fore.RESET)
                sys.exit()
            else:
                print("[-]" + " {0}".format(word) + " - " + "{0}".format(tmp))
        print(Fore.RED + "\n" + "[FAIL] No password was found.", Fore.RESET)
    elif(option1 == '9'):
        print(Fore.RED + "Full Hash: " + Fore.RESET, end="")
        full_hash = input()

        result = base64.b64decode(full_hash)
        result = str(result)
        print(Fore.GREEN + "[+] {0} ----> {1}".format(full_hash, result.strip("b '")), Fore.RESET)
    elif(option1 == '10'):
        print(Fore.RED + "Algorithm: " + Fore.RESET, end="")
        algorithm = input()
        algorithm = algorithm.lower()

        if(algorithm == "md5"):
            generate(1)
        elif(algorithm == "sha1"):
            generate(2)
        elif(algorithm == "sha256"):
            generate(3)
        elif(algorithm == "sha512"):
            generate(4)
        elif(algorithm == "base64"):
            generate(5)
        elif(algorithm == "sha384"):
            generate(6)
        elif(algorithm == "lm"):
            generate(7)
        elif(algorithm == "ntlm"):
            generate(8)
        elif(algorithm == "crypt"):
            generate(9)
        else:
            print("Error")
            sys.exit()
    else:
        print("Error")
        sys.exit()
else:
    banner()
    print(Fore.BLUE + "Usage: python all_hash.py wordlist.txt" + Fore.RESET)
